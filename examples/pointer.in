package main

// NOTE(daniel): as we don't have an `any` type, or variadics yet, we have
// to define two variants of `printf` for different argument types.
@(extern, link_name="printf")
printp :: func(msg: string, arg: ^int)

@(extern, link_name="printf")
printi :: func(msg: string, arg: int)

@(extern)
calloc :: func(num: int, size: int) -> ^int

update :: func(a: ^int, value: int) {
    // this becomes a store
    (a+1)^ = 35
    a^ = value
}

@(export)
main :: func() -> int {
    a := calloc(2, 4)

    printp("Address of a: %p\n", a)

    // Test whether we can pass a pointer to a function, and update its value.
    update(a, 34)

    // this becomes a load
    printi("Value at address a: %d\n", a^)
    printi("Value at address a+1: %d\n", (a+1)^)

    return 0
}
